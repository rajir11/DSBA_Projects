<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/RG/Downloads/New Orders(1).db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1745"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainADDRESS"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="ADDRESS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="90"/><column index="2" value="300"/><column index="3" value="261"/><column index="4" value="111"/><column index="5" value="98"/><column index="6" value="62"/><column index="7" value="66"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">--Q1 1. Write a query to Display the product details (product_class_code, product_id, product_desc, product_price,) 
--as per the following criteria and sort them in descending order of category: 
--a. If the category is 2050, increase the price by 2000 b. If the category is 2051, 
--increase the price by 500 c. If the category is 2052, increase the price by 600. 
--Hint: Use case statement. no permanent change in table required. (60 ROWS) [NOTE: PRODUCT TABLE]
SELECT product_class_code, product_id, product_desc, product_price,
CASE WHEN product_class_code = 2050 THEN product_price + 2000
WHEN product_class_code = 2051 THEN product_price + 500
WHEN product_class_code = 2052 THEN product_price + 600
ELSE &quot;No change in price&quot;
END AS Updated_Price
FROM Product;

--Q2 Write a query to display (product_class_desc, product_id, product_desc, product_quantity_avail ) 
-- and Show inventory status of products as below as per their available quantity: 
-- a. For Electronics and Computer categories, if available quantity is &lt;= 10, show 'Low stock', 11 &lt;= qty &lt;= 30, show 'In stock', &gt;= 31, 
-- show 'Enough stock' b. For Stationery and Clothes categories, if qty &lt;= 20, show 'Low stock', 21 &lt;= qty &lt;= 80, show 'In stock', &gt;= 81, 
-- show 'Enough stock' c. Rest of the categories, if qty &lt;= 15 – 'Low Stock', 16 &lt;= qty &lt;= 50 – 'In Stock', &gt;= 51 – 'Enough stock' 
-- l categories, if available quantity is 0, show 'Out of stock'. Hint: Use case statement. (60 ROWS) 
-- [NOTE: TABLES TO BE USED – product, product_class]
SELECT pc.product_class_desc, p.product_id, p.product_desc, p.product_quantity_avail,
CASE WHEN
pc.product_class_desc IN (&quot;Electronics&quot;,&quot;Computer&quot;) THEN
CASE
WHEN p.product_quantity_avail=0 THEN &quot;Out of Stock&quot;
WHEN p.product_quantity_avail&lt;=10 THEN &quot;Low Stock&quot;
WHEN p.product_quantity_avail BETWEEN 11 and 30 THEN &quot;In Stock&quot;
ELSE &quot;Enough Stock&quot;
END
WHEN pc.product_class_desc IN (&quot;Stationery &quot;,&quot;Clothes&quot;) THEN
CASE
WHEN p.product_quantity_avail=0 THEN &quot;Out of Stock&quot;
WHEN p.product_quantity_avail&lt;=20 THEN &quot;Low Stock&quot;
WHEN p.product_quantity_avail BETWEEN 21 and 80 THEN &quot;In Stock&quot;
ELSE &quot;Enough Stock&quot;
END
ELSE 
CASE
WHEN p.product_quantity_avail=0 THEN &quot;Out of Stock&quot;
WHEN p.product_quantity_avail&lt;=15 THEN &quot;Low Stock&quot;
WHEN p.product_quantity_avail BETWEEN 16 and 50 THEN &quot;In Stock&quot;
ELSE &quot;Enough Stock&quot;
END
END as Inventory_status_of_products
FROM PRODUCT p,
PRODUCT_CLASS pc
WHERE p.PRODUCT_CLASS_CODE=pc.PRODUCT_CLASS_CODE;


--Q3 3. Write a query to Show the count of cities in all countries other than USA &amp; MALAYSIA, with more than 1 city, 
-- in the descending order of CITIES. (2 rows) [NOTE: ADDRESS TABLE, Do not use Distinct]

--Total number of records for countries having number of cities greater than 1.
SELECT country,count(city) AS Total_Records 
FROM ADDRESS 
WHERE country NOT IN ('USA','Malaysia')
GROUP BY country HAVING count(city)&gt;1
ORDER BY city DESC;
--Totally there are 26 records for India and 6 records for Singapore

--Unique count of cities for countries having number of cities greater than 1.

--Subquery used to select country and city from address table and grouped based upon country and city
SELECT country,count(city) AS Total_Number_of_Cities 
FROM
(SELECT country,city FROM ADDRESS GROUP BY country,city)
WHERE country not in ('USA','Malaysia')
GROUP BY country HAVING count(city)&gt;1
ORDER BY city DESC;
--Totally there are 11 unique cities under India and 2 unique cities under Singapore

--Q4 Write a query to display the customer_id,customer full name ,city,pincode,and order details 
-- (order id,order date, product class desc, product desc, subtotal(product_quantity * product_price)) 
-- for orders shipped to cities whose pin codes do not have any 0s in them. Sort the output on customer name, 
-- order date and subtotal. (52 ROWS) [NOTE: TABLE TO BE USED - online_customer, address, order_header, order_items, 
-- product, product_class]
SELECT oc.customer_id,oc.CUSTOMER_FNAME || ' ' || oc.CUSTOMER_LNAME AS Customer_Full_name,ad.city,ad.pincode,
oh.ORDER_ID,oh.ORDER_DATE,pc.PRODUCT_CLASS_DESC, p.PRODUCT_DESC, oi.product_quantity * p.product_price AS Sub_Total 
FROM
online_customer AS oc 
INNER JOIN ORDER_HEADER AS oh ON oc.CUSTOMER_ID=oh.CUSTOMER_ID
INNER JOIN order_items AS oi ON oh.ORDER_ID=oi.ORDER_ID
INNER JOIN product AS p ON oi.PRODUCT_ID=p.PRODUCT_ID
INNER JOIN product_class AS pc ON p.PRODUCT_CLASS_CODE=pc.PRODUCT_CLASS_CODE
INNER JOIN ADDRESS AS ad ON oc.ADDRESS_ID=ad.ADDRESS_ID
WHERE ad.PINCODE NOT like '%0%' AND oh.ORDER_STATUS='Shipped' --Orders that are shipped to areas with pincode that does not contain 0 
ORDER by 
Customer_Full_name ASC, 
oh.ORDER_DATE ASC, 
Sub_Total ASC;

--Q5 Write a Query to display product id,product description,totalquantity(sum(product quantity) 
-- for an item which has been bought maximum no. of times (Quantity Wise) along with product id 201. 
-- (USE SUB-QUERY) (1 ROW) [NOTE: ORDER_ITEMS TABLE, PRODUCT TABLE]

SELECT p.PRODUCT_ID,p.PRODUCT_DESC,sum(oi.PRODUCT_QUANTITY)as Total_Quantity 
FROM 
order_items AS oi
INNER JOIN PRODUCT AS p ON oi.PRODUCT_ID=p.PRODUCT_ID
WHERE oi.order_id IN 
(SELECT oi.ORDER_ID FROM order_items AS oi WHERE oi.product_id=201)--orders placed with product ID 201.
GROUP BY oi.PRODUCT_ID
ORDER BY Total_Quantity DESC
LIMIT 1;


--Q6 Write a query to display the customer_id,customer name, email and order details 
-- (order id, product desc,product qty, subtotal(product_quantity * product_price)) 
-- for all customers even if they have not ordered any item.(225 ROWS) 
-- [NOTE: TABLE TO BE USED - online_customer, order_header, order_items, product]
SELECT oc.customer_id,oc.CUSTOMER_FNAME || ' ' || oc.CUSTOMER_LNAME AS Customer_Full_name,oc.CUSTOMER_EMAIL,
oi.ORDER_ID, p.PRODUCT_DESC,oi.product_quantity, oi.product_quantity * p.product_price AS sub_total 
FROM
online_customer AS oc 
LEFT JOIN ORDER_HEADER AS oh ON oc.CUSTOMER_ID=oh.CUSTOMER_ID --left join is used since we need all customers even if not ordered
LEFT JOIN order_items AS oi ON oh.ORDER_ID=oi.ORDER_ID
LEFT JOIN product AS p ON oi.PRODUCT_ID=p.PRODUCT_ID;

</sql><current_tab id="0"/></tab_sql></sqlb_project>
